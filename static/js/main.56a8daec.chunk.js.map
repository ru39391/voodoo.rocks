{"version":3,"sources":["contexts/UserListContext.js","components/Post.js","contexts/PostListContext.js","components/SearchForm.js","utils/api.js","components/App.js","serviceWorker.js","index.js"],"names":["UserListContext","React","createContext","Post","title","body","userId","author","useContext","find","item","id","Col","md","lg","className","Card","Body","Title","Text","Link","href","name","PostListContext","SearchForm","onUpdatePostList","postList","userList","useState","Author","setAuthor","Form","InputGroup","FormControl","placeholder","value","onChange","e","authorValue","target","authorList","filter","toLowerCase","includes","split","length","map","searchResult","authorListItem","arr","Boolean","api","baseUrl","_baseUrl","result","resultAlert","ok","json","Promise","reject","status","fetch","this","then","response","_checkResponse","Component","App","Users","setUserList","Posts","setPostList","CurrentPosts","setCurrentPostList","useEffect","all","getUsers","getPosts","users","posts","catch","err","console","log","Provider","Container","Row","postItem","key","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56a8daec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst UserListContext = React.createContext();\r\nexport default UserListContext;","import React from 'react';\r\nimport UserListContext from '../contexts/UserListContext';\r\nimport { Col, Card } from 'react-bootstrap';\r\n\r\nfunction Post({title, body, userId}) {\r\n  const usersList = React.useContext(UserListContext);\r\n  const author = usersList.find(item => item.id === userId);\r\n\r\n  return (\r\n    <Col md={6} lg={4} className=\"d-flex flex-column mb-3\">\r\n      <Card className=\"flex-grow-1\">\r\n        <Card.Body className=\"d-flex flex-column\">\r\n          <Card.Title className=\"text-capitalize text-primary font-weight-bold\">{title}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1 text-dark\">{body}</Card.Text>\r\n          <Card.Link href=\"#\">{author.name}</Card.Link>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\n\r\nconst PostListContext = React.createContext();\r\nexport default PostListContext;","import React from 'react';\r\nimport PostListContext from '../contexts/PostListContext';\r\nimport UserListContext from '../contexts/UserListContext';\r\nimport { Col, Form, FormControl, InputGroup } from 'react-bootstrap';\r\n\r\nfunction SearchForm({onUpdatePostList}) {\r\n  const postList = React.useContext(PostListContext);\r\n  const userList = React.useContext(UserListContext);\r\n  const [Author, setAuthor] = React.useState('');\r\n\r\n  function handleChangeAuthor(e) {\r\n    const authorValue = e.target.value;\r\n    let authorList = userList.filter(item => item.name.toLowerCase().includes(authorValue.toLowerCase()));\r\n    setAuthor(authorValue);\r\n\r\n    if(authorValue.split('').length > 3) {\r\n      switch(authorList.length > 1) {\r\n        case true:\r\n          authorList = authorList.map(item => item.id);\r\n          const searchResult = postList.filter(item => authorList.find(authorListItem => authorListItem === item.userId));\r\n          onUpdatePostList({\r\n            arr: Boolean(searchResult.length) ? searchResult : postList\r\n          });\r\n          break;\r\n\r\n        case false:\r\n          onUpdatePostList({\r\n            arr: Boolean(authorList[0]) ? postList.filter(item => item.userId === authorList[0].id) : postList\r\n          });\r\n          break;\r\n      }\r\n    } else {\r\n      onUpdatePostList({\r\n        arr: postList\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form className=\"d-flex justify-content-center mb-4\">\r\n      <Col md={6} lg={4} className=\"px-0 px-lg-3\">\r\n        <InputGroup>\r\n          <span className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">&#x1F50E;</span>\r\n          </span>\r\n          <FormControl placeholder=\"Filter by author...\" name=\"author\" value={Author || ''} onChange={handleChangeAuthor} />\r\n        </InputGroup>\r\n      </Col>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\n\r\nclass Api extends React.Component {\r\n  constructor(baseUrl) {\r\n    super();\r\n    this._baseUrl = baseUrl;\r\n  }\r\n\r\n  _checkResponse(result, resultAlert) {\r\n    if (result.ok) {\r\n      return result.json();\r\n    }\r\n\r\n    return Promise.reject(`${resultAlert}: ${result.status}`);\r\n  }\r\n\r\n  getPosts() {\r\n    return fetch(`${this._baseUrl}/posts`)\r\n      .then((response) => {return this._checkResponse(response, 'Ошибка при загрузке постов')})\r\n      .then((json) => json);\r\n  }\r\n\r\n  getUsers() {\r\n    return fetch(`${this._baseUrl}/users`)\r\n      .then((response) => {return this._checkResponse(response, 'Ошибка при загрузке данных пользователей')})\r\n      .then((json) => json);\r\n  }\r\n}\r\n\r\nconst api = new Api('https://jsonplaceholder.typicode.com');\r\n\r\nexport default api;","import React from 'react';\r\nimport Post from './Post';\r\nimport SearchForm from './SearchForm';\r\nimport api from '../utils/api';\r\nimport PostListContext from '../contexts/PostListContext';\r\nimport UserListContext from '../contexts/UserListContext';\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [Users, setUserList] = React.useState([]);\r\n  const [Posts, setPostList] = React.useState([]);\r\n  const [CurrentPosts, setCurrentPostList] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    Promise.all([api.getUsers(), api.getPosts()])\r\n      .then(([users, posts]) => {\r\n        setUserList(users);\r\n        setPostList(posts);\r\n        setCurrentPostList(posts);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  function handleUpdatePostList({arr}) {\r\n    setCurrentPostList(arr);\r\n  }\r\n\r\n  return (\r\n    <UserListContext.Provider value={Users}>\r\n      <div className=\"alert alert-primary border-0 rounded-0 px-0 py-4 mb-0\">\r\n        <Container>\r\n          <PostListContext.Provider value={Posts}>\r\n            <SearchForm onUpdatePostList={handleUpdatePostList} />\r\n          </PostListContext.Provider>\r\n          <Row>\r\n            {CurrentPosts.map((postItem) => (\r\n              <Post\r\n                key={postItem.id}\r\n                title={postItem.title}\r\n                body={postItem.body}\r\n                userId={postItem.userId}\r\n              />\r\n            ))}\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </UserListContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}